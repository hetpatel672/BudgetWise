name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint --if-present
      
    - name: Run tests
      run: npm test --if-present

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      run: npm ci
      
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./android/gradlew
      
    - name: Build Android Debug APK
      run: |
        cd android
        ./gradlew assembleDebug
        
    - name: Build Android Release APK
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd android
        ./gradlew assembleRelease
        
    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: android-debug-apk
        path: android/app/build/outputs/apk/debug/app-debug.apk
        
    - name: Upload Release APK
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: android-release-apk
        path: android/app/build/outputs/apk/release/app-release.apk

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        working-directory: ios
        
    - name: Install CocoaPods
      run: |
        cd ios
        pod install
        
    - name: Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
          
    - name: Build iOS Debug
      run: |
        cd ios
        xcodebuild -workspace BudgetWiseBare.xcworkspace \
          -scheme BudgetWiseBare \
          -configuration Debug \
          -destination 'generic/platform=iOS Simulator' \
          -archivePath $PWD/build/BudgetWiseBare.xcarchive \
          archive
          
    - name: Build iOS Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd ios
        xcodebuild -workspace BudgetWiseBare.xcworkspace \
          -scheme BudgetWiseBare \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -archivePath $PWD/build/BudgetWiseBare-Release.xcarchive \
          archive
          
    - name: Upload iOS Debug Archive
      uses: actions/upload-artifact@v4
      with:
        name: ios-debug-archive
        path: ios/build/BudgetWiseBare.xcarchive
        
    - name: Upload iOS Release Archive
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4
      with:
        name: ios-release-archive
        path: ios/build/BudgetWiseBare-Release.xcarchive

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Android APK
      uses: actions/download-artifact@v4
      with:
        name: android-release-apk
        path: ./artifacts/
        
    - name: Download iOS Archive
      uses: actions/download-artifact@v4
      with:
        name: ios-release-archive
        path: ./artifacts/
        
    - name: Get tag name
      id: tag
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.TAG_NAME }}
        name: Release ${{ steps.tag.outputs.TAG_NAME }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          ./artifacts/app-release.apk
        body: |
          ## What's Changed
          
          This release includes:
          - üì± Android APK ready for installation
          - üçé iOS archive for App Store submission
          - üêõ Bug fixes and improvements
          
          ### Installation
          
          **Android:**
          - Download the APK file below
          - Enable "Install from unknown sources" in your device settings
          - Install the APK
          
          **iOS:**
          - This release requires Xcode for installation
          - Or wait for App Store release
          
          ### Checksums
          
          You can verify the integrity of the downloaded files using the checksums below.
          
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-to-stores:
    name: Deploy to App Stores
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'release')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Android APK
      uses: actions/download-artifact@v4
      with:
        name: android-release-apk
        path: ./artifacts/
        
    # Note: This would require additional setup for actual store deployment
    # Including signing keys, store credentials, etc.
    - name: Deploy to Google Play (Placeholder)
      run: |
        echo "üöÄ Would deploy to Google Play Store here"
        echo "üì± APK: ./artifacts/app-release.apk"
        echo "‚ö†Ô∏è  Requires Google Play Console setup and signing keys"
        
    - name: Deploy to App Store (Placeholder)
      run: |
        echo "üöÄ Would deploy to Apple App Store here"
        echo "üçé Archive: ./artifacts/ios-release-archive"
        echo "‚ö†Ô∏è  Requires Apple Developer account and certificates"

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.build-android.result == 'success' && needs.build-ios.result == 'success'
      run: |
        echo "‚úÖ Build completed successfully!"
        echo "üì± Android and iOS builds are ready"
        
    - name: Notify Failure
      if: needs.build-android.result == 'failure' || needs.build-ios.result == 'failure'
      run: |
        echo "‚ùå Build failed!"
        echo "üîç Check the logs for details"
        exit 1